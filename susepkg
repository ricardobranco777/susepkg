#!/usr/bin/env python3
"""
Show SUSE package versions
"""

import argparse
import fnmatch
import logging
import platform
import re
import sys
from functools import total_ordering
from urllib.parse import urlencode

import requests
from requests.exceptions import RequestException
import rpm  # type: ignore


TIMEOUT = 10
VERSION = "0.7"


@total_ordering
class RPMVersion:
    """
    RPMVersion class to compare RPM versions
    """

    def __init__(self, version: str, release: str):
        self.version = version
        self.release = release
        self._tuple = ("1", version, release)

    def __str__(self):
        return f"{self.version}-{self.release}"

    def __lt__(self, other):
        # pylint: disable=no-member
        return rpm.labelCompare(self._tuple, other._tuple) < 0

    def __eq__(self, other):
        # pylint: disable=no-member
        return rpm.labelCompare(self._tuple, other._tuple) == 0


def get_data(url: str) -> list[dict]:
    """
    Get data from URL
    """
    try:
        got = requests.get(url, timeout=TIMEOUT)
        got.raise_for_status()
    except RequestException as error:
        logging.error("%s: %s", url, error)
        sys.exit(1)
    return got.json()["data"]


def get_product_id(identifier: str) -> int | None:
    """
    Get product ID
    """
    url = "https://scc.suse.com/api/package_search/products"
    products = get_data(url)

    if identifier == "list":
        for product in sorted(
            dict.fromkeys(
                p["identifier"][: p["identifier"].rfind("/")] for p in products
            )
        ):
            print(product)
    else:
        for product in products:
            if product["identifier"] == identifier:
                return product["id"]

    return None


def print_version(
    package: str,
    regex: re.Pattern,
    product: str,
    arch: str,
    all_versions: bool = False,
) -> None:
    """
    Print version
    """
    product_id = get_product_id(f"{product}/{arch}")
    if product_id is None:
        return

    url = "https://scc.suse.com/api/package_search/packages"
    query_params: dict[str, int | str] = {"product_id": product_id}
    if regex.pattern == f"{package}$" and not regex.flags & re.IGNORECASE:
        query_params["query"] = package
    url = f"{url}?{urlencode(query_params)}"

    data = get_data(url)

    latest: dict[str, RPMVersion] = {}
    for info in sorted(
        filter(lambda i: regex.match(i["name"]), data),
        key=lambda i: (i["name"], RPMVersion(i["version"], i["release"])),
    ):
        rpm_version = RPMVersion(info["version"], info["release"])
        if all_versions:
            print(info["name"], rpm_version)
        else:
            latest[info["name"]] = rpm_version

    if not all_versions:
        for name, rpm_version in latest.items():
            print(name, rpm_version)


def get_regex(
    package: str, ignore_case: bool = False, is_regex: bool = False
) -> re.Pattern:
    """
    Compile package string to regular expression
    """
    flags = re.IGNORECASE if ignore_case else 0
    if is_regex:
        return re.compile(package, flags)
    if any(c in package for c in "[?*"):
        return re.compile(fnmatch.translate(package), flags)
    return re.compile(f"{package}$", flags)


if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        prog="susepkg",
        description="show SUSE package versions",
    )
    parser.add_argument("-a", "--all", action="store_true", help="all versions")
    parser.add_argument(
        "-A",
        "--arch",
        choices=["aarch64", "ppc64le", "s390x", "x86_64"],
        default=platform.machine(),
    )
    parser.add_argument(
        "-i", "--insensitive", action="store_true", help="case insensitive search"
    )
    parser.add_argument("-p", "--product", help="product or list")
    parser.add_argument(
        "-x", "--regex", action="store_true", help="search regular expression"
    )
    parser.add_argument("--version", action="version", version=f"v{VERSION}")
    parser.add_argument("package", nargs="?")
    args = parser.parse_args()

    try:
        if args.product == "list":
            get_product_id("list")
        elif not args.package:
            parser.print_help()
            sys.exit(1)
        else:
            print_version(
                package=args.package,
                regex=get_regex(
                    args.package, ignore_case=args.insensitive, is_regex=args.regex
                ),
                product=args.product,
                arch=args.arch,
                all_versions=args.all,
            )
    except KeyboardInterrupt:
        sys.exit(1)
